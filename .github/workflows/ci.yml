name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

    # file paths to consider in the event. Optional; defaults to all.
    paths:
      - 'alexroman.cv.api/*'
  
  # Run tests for PRs into master branch
  pull_request:
    branches: [ master ]
    
    paths:
      - 'alexroman.cv.api/*'

# Define enviornment variables for the workflow
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: cv-api

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Run tests.
  test:
     runs-on: ubuntu-latest
     
     steps:
      - uses: actions/checkout@v2
      
      - name: Run tests
        run: |
          
          # Run a Dockerized testing script, or just build the docker image if no such script exists
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file ../../alexroman.cv.api/Dockerfile
          fi
     
  # Build and push image to Docker Registry
  push:
    # Ensure test job passes before pushing image.
    needs: test
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Only run this job for push events 
    if: github.event_name == 'push'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Builds the docker image (path relative to this file)
    - name: Build image
      run: docker build . --file ../../alexroman.cv.api/Dockerfile --tag $IMAGE_NAME

    # Login to the docker registry using the default GITHUB_TOKEN environment variable and github.actor (The login of the user that initiated the workflow run)
    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      
    # Push the image to the Docker Registry
    - name: Push image
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
        
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        
        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
